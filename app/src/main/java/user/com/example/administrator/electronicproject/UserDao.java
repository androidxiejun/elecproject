package user.com.example.administrator.electronicproject;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserNick = new Property(1, String.class, "userNick", false, "USER_NICK");
        public final static Property UserSex = new Property(2, String.class, "userSex", false, "USER_SEX");
        public final static Property UserId = new Property(3, String.class, "userId", false, "USER_ID");
        public final static Property UserBirthday = new Property(4, String.class, "userBirthday", false, "USER_BIRTHDAY");
        public final static Property UserPhone = new Property(5, String.class, "userPhone", false, "USER_PHONE");
        public final static Property UserEmail = new Property(6, String.class, "userEmail", false, "USER_EMAIL");
        public final static Property UserAddre = new Property(7, String.class, "userAddre", false, "USER_ADDRE");
        public final static Property UserImage = new Property(8, String.class, "userImage", false, "USER_IMAGE");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, UserdbDaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_NICK\" TEXT UNIQUE ," + // 1: userNick
                "\"USER_SEX\" TEXT," + // 2: userSex
                "\"USER_ID\" TEXT," + // 3: userId
                "\"USER_BIRTHDAY\" TEXT," + // 4: userBirthday
                "\"USER_PHONE\" TEXT," + // 5: userPhone
                "\"USER_EMAIL\" TEXT," + // 6: userEmail
                "\"USER_ADDRE\" TEXT," + // 7: userAddre
                "\"USER_IMAGE\" TEXT);"); // 8: userImage
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userNick = entity.getUserNick();
        if (userNick != null) {
            stmt.bindString(2, userNick);
        }
 
        String userSex = entity.getUserSex();
        if (userSex != null) {
            stmt.bindString(3, userSex);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(4, userId);
        }
 
        String userBirthday = entity.getUserBirthday();
        if (userBirthday != null) {
            stmt.bindString(5, userBirthday);
        }
 
        String userPhone = entity.getUserPhone();
        if (userPhone != null) {
            stmt.bindString(6, userPhone);
        }
 
        String userEmail = entity.getUserEmail();
        if (userEmail != null) {
            stmt.bindString(7, userEmail);
        }
 
        String userAddre = entity.getUserAddre();
        if (userAddre != null) {
            stmt.bindString(8, userAddre);
        }
 
        String userImage = entity.getUserImage();
        if (userImage != null) {
            stmt.bindString(9, userImage);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userNick = entity.getUserNick();
        if (userNick != null) {
            stmt.bindString(2, userNick);
        }
 
        String userSex = entity.getUserSex();
        if (userSex != null) {
            stmt.bindString(3, userSex);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(4, userId);
        }
 
        String userBirthday = entity.getUserBirthday();
        if (userBirthday != null) {
            stmt.bindString(5, userBirthday);
        }
 
        String userPhone = entity.getUserPhone();
        if (userPhone != null) {
            stmt.bindString(6, userPhone);
        }
 
        String userEmail = entity.getUserEmail();
        if (userEmail != null) {
            stmt.bindString(7, userEmail);
        }
 
        String userAddre = entity.getUserAddre();
        if (userAddre != null) {
            stmt.bindString(8, userAddre);
        }
 
        String userImage = entity.getUserImage();
        if (userImage != null) {
            stmt.bindString(9, userImage);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userNick
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userSex
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userBirthday
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userPhone
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userEmail
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // userAddre
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // userImage
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserNick(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserSex(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserBirthday(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserPhone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserEmail(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUserAddre(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUserImage(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
